

//  Bounce.sketchplugin

//  Stewart Smith
//  Twitter @stewd_io
//  Web      stewd.io
//  GitHub   stewdio


var verbose = true








//  Let’s get going.

if( verbose ) log( '// /  /    /        /                /                                /' )


//  Get the current “canvas”
//  and its dimensions.

var 
page = doc.currentPage(),
artboard = page.currentArtboard() || ( page.artboards().count() ? page.artboards()[0] : null ),
artboardFrame,
canvas, canvasFrame

if( artboard ){

	if( verbose ) log( 'We’re going to reuse an existing artboard as our canvas.' )
	canvas = artboard
}
else {

	if( verbose ) log( 'No artboard exists so we’re going to create a new one to use as our canvas.' )
	artboard = MSArtboardGroup.new()
	artboard.setName( 'Bounce board' )
	artboard.frame().setWidth(  600 )
	artboard.frame().setHeight( 400 )
	page.addLayer( artboard )
	canvas = artboard	
}
canvasFrame = canvas.frame()
if( verbose ) log( 'Our canvas is named “'+ canvas.name() +'” and is '+ canvasFrame.width() +' × '+ canvasFrame.height() +'.' )


//  Seemed like a good idea to bake this right in
//  since I’ve had to do so much guess and check work
//  with creating Paths in Sketch:

if( selection.count() > 0 ) inspect( selection[0] )








//  Here’s our Ball class which handles what you would expect
//  and also pushes the instance it creates into balls[]
//  so it’s really easy to deal with all instances at once.
//  (You’ll see more of what I mean below when we define balls[].)

function Ball(){

	var
	style, fill,
	hue, saturation, value, rgb


	//  This is for our own silly records.

	this.index = balls.length


	//  This is the mathy-math we need to keep track of.

	this.x  = Math.random() * canvas.frame().width()
	this.y  = canvas.frame().height() / 2 + Math.random() * canvas.frame().height() / 2
	this.vx = ( 20 + Math.random() * 20 ) * ( Math.floor( Math.random() * 2 ) === 0 ? 1 : -1 )
	this.vy = ( 20 + Math.random() * 20 ) * -1
	this.r  =   20 + Math.random() * 40


	//  Now we have our actual dot Shape.

	this.shape = MSOvalShape.alloc().init()
	this.shape.setName( 'Ball ' + ( balls.length + 1 ))
	this.shape.frame = MSRect.rectWithRect( NSMakeRect( 0, 0, this.r * 2, this.r * 2 ))


	//  But the shape itself is rather primitive
	//  and must be housed inside a Shape Group.
	//  This is what we’ll actually move about the artboard.
	//  Also: Shape Groups can have style!

	this.shapeGroup = this.shape.embedInShapeGroup()
	this.shapeGroup.frame().setX( this.x - this.r )
	this.shapeGroup.frame().setY( this.y - this.r )


	//  Let’s set the Blending Mode to 'Multiply.'

	style = this.shapeGroup.style()
	style.contextSettings().setBlendMode( 2 )


	//  Color it!
	//  We’re going to get much more vibrant color by using HSV 
	//  with a random Hue and full-on Saturation and Value
	//  than by using random Red, Green, and Blue channel values.
	//  Then we just convert from HSV to RGB.
	
	hue           = Math.random()
	saturation    = 1.0
	value         = 1.0
	rgb           = HSVtoRGB( hue, saturation, value )
	fill          = style.fills().addNewStylePart()
	fill.color    = [MSColor colorWithRed:rgb.r green:rgb.g blue:rgb.b alpha:0.95]
	fill.fillType = 0


	//  We’re all done creating our Ball.
	//  Let’s add the Shape Group (which contains the Shape)
	//  to our group folder on the artboard.

	balls.group.addLayers([ this.shapeGroup ])
	

	//  And push a reference of our Ball into an Array
	//  for easy management later.

	balls.push( this )
}


//  Our individual instances don’t need their own .update()
//  when they can just inherit it from the Class, right?
//  Is this just splitting hairs?!?

Ball.prototype.update = function(){

	this.x += this.vx
	if( this.x - this.r < 0 || this.x + this.r > canvas.frame().width() ) this.vx *= -1
	this.shapeGroup.frame().setX( this.x - this.r )
	
	this.y += this.vy
	if( this.y - this.r < 0 || this.y + this.r > canvas.frame().height() ) this.vy *= -1
	this.shapeGroup.frame().setY( this.y - this.r )
}




//  Here I’m going to create an Array called balls[]
//  and overload it with whatever bits we want 
//  which will handle all the Balls we make.
//  We could have instead added these bits to the Ball class itself
//  like Ball.all = [], Ball.group = canvas.addLayerOfType( 'group' ), etc.
//  but I really like “Ball” as a singular for dealing with one ball
//  and “balls” as plural for dealing with all. Just reads nicer.

var balls = []

balls.group = canvas.addLayerOfType( 'group' )
balls.group.setName( 'Balls' )
balls.group.frame().setWidth( canvas.frame().width() )
balls.group.frame().setHeight( canvas.frame().height() )
balls.frame = 0
balls.framesAllowed = 200
balls.arePaused = false


balls.create = function( total ){


	//  Look how tidy instance creation can be ;)

	if( total === undefined ) total = 12
	while( total -- ) new Ball()


	//  You know what would be cool? 
	//  If we could Pause or Stop the animation by selecting
	//  buttons on the side of the Artboard!

	var
	shape, shapeGroup,
	style, fill


	//  Pause button

	shape = MSRectangleShape.alloc().init()
	shape.setName( 'Balls Pause' )
	shape.frame = MSRect.rectWithRect( NSMakeRect( 0, 0, 60, 60 ))
	shapeGroup = shape.embedInShapeGroup()
	shapeGroup.frame().setX(( artboard.frame().width() + 60 ))
	shapeGroup.frame().setY( 30 )
	fill = shapeGroup.style().fills().addNewStylePart()
	fill.color = MSColor.colorWithSVGString( '#FFCC00' )
	page.addLayers([ shapeGroup ])


	//  Stop button

	shape = MSRectangleShape.alloc().init()
	shape.setName( 'Balls Stop' )
	shape.frame = MSRect.rectWithRect( NSMakeRect( 0, 0, 60, 60 ))
	shapeGroup = shape.embedInShapeGroup()
	shapeGroup.frame().setX( artboard.frame().width() + 60 )
	shapeGroup.frame().setY( 120 )
	fill = shapeGroup.style().fills().addNewStylePart()
	fill.color = MSColor.colorWithSVGString( '#DD0000' )
	page.addLayers([ shapeGroup ])
}


//  Updating Ball coordinates is also tidy.

balls.update = function( interval ){


	//  We need to update and redraw all the Balls.
	//  That is, if we’re not paused!

	if( balls.arePaused === false ){

		balls.forEach( function( ball ){

			ball.update()
		})
		balls.frame ++


		//  We need to force a redraw 
		//  otherwise Sketch doesn’t bother to move the balls.
		//  This seems to do the trick.

		canvas.setHasBackgroundColor( false )
		canvas.setHasBackgroundColor( true )
	}
	

	//  Here we check to see if our UI buttons are selected.
	//  This is my first stab at it—probably more efficient to use a
	//  .isSelected() kind of thing... Will look further into it.

	var 
	selected   = MSDocument.currentDocument().findSelectedLayers(), s,
	wantsStop  = false,
	wantsPause = false

	//  A user can select multiple things at once of course
	//  so we want to prioritize STOP over PAUSE.
	//  For example, if you selected both we’d just stop.

	//  Also WOW WOW WOW OMG LISTEN TO THIS:
	//  We CANNOT use a triple equals here when comparing Strings
	//  because the Strings returned from .name() are NOT regular
	//  JavaScript Strings! They are == but not ===. You dig?
	//  Banged my head a few times before I caught that little gem.

	if( selected.count() > 0 ){

		for( s = 0; s < selected.count(); s ++ ){

			if( selected[ s ].name() == 'Balls Stop'  ) wantsStop  = true
			if( selected[ s ].name() == 'Balls Pause' ) wantsPause = true
		}
	}
	if( wantsStop === true ) return interval.cancel()
	else if( wantsPause === true ) balls.arePaused = true
	else balls.arePaused = false


	//  This is some old code for automatically killing the demo.
	
	// if( balls.frame % 50 === 0 && verbose ){

	// 	log( 'We’ve animated for '+ balls.frame +' frames so far with '+ (balls.framesAllowed - balls.frame) +' more frames to go.' )
	// }
	// if( balls.frame > balls.framesAllowed ){
		
	// 	if( verbose ) log( 'Ok. Time for us to cancel this animation loop.' )
	// 	interval.cancel()
	// }
}








//  Ok. We have all our dominoes lined up. 
//  Let’s create the balls:

balls.create()


//  Finally, let’s create a looper (like “setInterval” for you browser peeps)
//  and we pass it 2 arguments:
//  1: the interval time in seconds
//  2: our balls.update() function.
//  If you were looking to do a simple setTimeout rather than setInterval
//  you would use .scheduleWithInterval_jsFunction() instead
//  which expects the same 2 argument types.

//  Sadly I’ve noticed on my own setup 
//  if I try to go faster than 0.2 seconds per interval
//  Sketch crashes immediately. Not sure why.
//  Hence the really choppy frame rate. (Sorry!)

coscript.shouldKeepAround = true
coscript.scheduleWithRepeatingInterval_jsFunction( 0.2, balls.update )












//  Convert an HSV color model (Hue, Saturation, Value)
//  into an RGB one (Red, Green, Blue).
//  Accepts values from 0 to 1 inclusive
//  and returns likewise.
//  Check out my sweet Array literal return expression ;)

function HSVtoRGB( h, s, v ){

	var i, f, p, q, t, r, g, b
	
	i = Math.floor( h * 6 )
	f = h * 6 - i
	p = v * ( 1 - s )
	q = v * ( 1 - f * s )
	t = v * ( 1 - ( 1 - f ) * s )
	
	return [

		{ r: v, g: t, b: p },
		{ r: q, g: v, b: p },
		{ r: p, g: v, b: t },
		{ r: p, g: q, b: v },
		{ r: t, g: p, b: v },
		{ r: v, g: p, b: q }

	][ i % 6 ]
}




//  Object inspection,
//  copied from github.com/sketchplugins/plugin-requests

function inspect( obj ){

	if( obj === undefined ) obj = doc.currentPage().currentArtboard()

	log( ' ' )
	log( '============================================================' )
	log( 'Object   '+ obj )
	log( 'of Class '+ [obj className] )
	log( '------------------------------------------------------------' )
	log( '.properties' )
	log( [obj class].mocha().properties() )
	log( '.propertiesWithAncestors' )
	log( [obj class].mocha().propertiesWithAncestors() )
	log( '------------------------------------------------------------' )
	log( '.classMethods' )
	log( [obj class].mocha().classMethods() )
	log( '.classMethodsWithAncestors' )
	log( [obj class].mocha().classMethodsWithAncestors() )
	log( '------------------------------------------------------------' )
	log( '.instanceMethods' )
	log( [obj class].mocha().instanceMethods() )
	log( '.instanceMethodsWithAncestors' )
	log( [obj class].mocha().instanceMethodsWithAncestors() )
	log( '------------------------------------------------------------' )
	log( '.protocols' )
	log( [obj class].mocha().protocols() )
	log( '.protocolsWithAncestors' )
	log( [obj class].mocha().protocolsWithAncestors() )
	log( '------------------------------------------------------------' )
	log( '.treeAsDictionary()' )
	log( obj.treeAsDictionary() )
	log( '============================================================' )
	log( ' ' )
}



